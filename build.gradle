apply from: this.file('common.gradle')// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.50'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {

    repositories {
        google()
        jcenter()
        maven {
            url "https://jitpack.io"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
/**
 * 初始化阶段在setting gradle 那里
 */

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println '配置阶段开始'
}

/**
 * 配置阶段完成监听回调
 */
this.afterEvaluate {
    println '配置阶段执行完毕'
}

/**
 * gradle 执行完毕监听回调
 */
this.gradle.buildFinished {
    println 'gradle 执行完毕...'
}

this.gradle.beforeProject {
    println 'beforeProject 执行。。。'
}

this.gradle.afterProject {
    println 'afterProject 执行...'
}

//this.gradle.addListener()
//this.gradle.addProjectEvaluationListener()

/**
 * project 相关api
 */
//this.getProjects()//调用方法
//this.getAllprojects()
//this.getParentProject()
//this.getRootPro()

/**
 * 配置阶段方法
 * @return
 */
def getProjects() {
    println '.............'
    println 'Root Project'
    println '-------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println "Root project :'${project.name}'"
        } else {
            println "+---- project : '${project.name}'"
        }
    }
    // this.getAllprojects()//获取所有projects
    // this.getSubprojects() //获取所有子projects
    
}


//def getParentProject() {
//    def name = this.getParent().name
//    println "the parent project name is:$name"
//}

def getRootPro() {
    def name = this.getRootProject().name
    println "'getRootPro' the root project name is $name"
}

/**
 * 配置子project app project
 * app gradle 的配置都可以移到这里了
 */
project('app') { Project project ->
//    println project.name
    apply plugin: 'com.android.application'


    dependencies {

    }
    android {

    }
}

/**
 * 配置所有project , 本project 和所有子project
 */
allprojects{
    group 'com.imooc'
    version '1.0.0-release'
}

println project('app').group

/**
 * 不包括根工程， 只包括子工程
 */
subprojects { Project project ->
    if (project.plugins.hasPlugin('com.android.library')) {
    //引入 gradle 文件的功能
//    apply from: '../publishToMaven.gradle'

    }

}

/**
 * 为所有sub project 定义扩展属性
 */
subprojects {
//    ext {
//        compileSdkVersion = 25//使用 this.compileSdkVersion
//    }
}

/**
 * 跟projectd定义扩展属性
 * 根project 定义的所有的属性会被子project继承
 * 子project,使用this.rootproject.compileSdkVersion 可以直接变成this.compileSdkVersion
 *  还可以在扩展属性定义在另外一个gradle 文件，然后使用apply from: 'path' 引用他
 */
//跟projectd定义扩展属性
ext {
    compileSdkVersion = 25//使用 this.compileSdkVersion
}

/**
 * 文件api
 */
println "the root file path is: ${getRootDir().absolutePath}"
println "the build file path is: ${getBuildDir().absolutePath}"
println "the project file path is: ${getProjectDir().absolutePath}"

/**
 * 文件定位
 * file() 传入当前文件相对路径
 * files() 多个文件 ， 返回 collect(file)
 */
println getContent('common.gradle')
def getContent(String path) {
    try {
        def file = file(path)
        return file.text
    } catch (GradleException e) {
        println 'file not found ...'
    }
    return null
}

/**
 * 依赖api 学习
 */
//buildscript { ScriptHandler scriptHandler ->
//    //配置我们工程的仓库地址
//    scriptHandler.repositories { RepositoryHandler repositoryHandler ->
//        repositoryHandler.jcenter()
//        repositoryHandler.mavenCentral()
//        repositoryHandler.mavenLocal()
//        repositoryHandler.ivy {}
//        repositoryHandler.maven {
//            name 'personal'
//            url ''
//            credentials {
//                username = ''
//                password = ''
//            }
//
//        }
//    }
//
//
//    //配置我们工程的“插件”依赖地址
//    scriptHandler.dependencies {
//        classpath 'com.android.tools.build:gradle:2.2.2'
//        classpath 'com.tencent.tinker-patch-gradle-plugin:1.7.7'
//    }
//}
task('aaa'){

}


